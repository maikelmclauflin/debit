var extend = require('.');
var b = require('batterie');
b.describe('extend', function () {
    b.it('is a function', b.curry(extend, 'toBeFunction'));
    b.it('extends constructors', function (t) {
        // Class.extend = extend;
        var Clas = extend.wrapper(Class);
        var NuClass = Class.extend({});
        var instance = NuClass();
        t.expect(instance).toBeInstance(Class);
        t.expect(instance).toBeInstance(NuClass.constructor);
        t.expect(instance.fn).toBe(NuClass.fn);

        function Class() {}
    }, 3);
    b.it('passes a bound super in the constructor', function (t) {
        var Clas = extend.wrapper(Class);
        var NuClass = Class.extend({
            constructor: function (supr, arg) {
                supr(arg);
            }
        });
        var instance = NuClass([1]);
        t.expect(instance).toBeInstance(Clas.constructor);

        function Class(arg) {
            t.expect(this).toBeInstance(Clas.constructor);
            t.expect(arg).toBeArray();
        }
    }, 3);
    b.it('passes a bound super in the constructor', function (t) {
        var Clas = extend.wrapper(Class);
        var NuClass = Clas.extend('NuClass', {
            constructor: function (supr, arg) {
                supr(arg);
            }
        });
        var instance = NuClass([1]);
        t.expect(instance).toBeInstance(Class);

        function Class(arg) {
            t.expect(this).toBeInstance(Clas.constructor);
            t.expect(arg).toBeArray();
        }
    }, 3);
    b.it('can also stack constructors', function (t) {
        var One = extend.wrapper(One_);
        var Two = One.extend('Two', {
            constructor: function (supr, arg) {
                supr(arg - 1);
                t.expect(arg).toBe(2);
            }
        });
        var Three = Two.extend('Three', {
            constructor: function (supr, arg) {
                supr(arg - 1);
            }
        });
        Three(3);

        function One_(arg) {
            t.expect(this).toBeInstance(One.constructor);
            t.expect(arg).toBe(1);
        }
    }, 3);
});