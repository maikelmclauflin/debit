module.exports = constructorExtend;
var isString = require('is/string');
var merge = require('object/merge');
var has = require('object/has');
var isInstance = require('is/instance');
var factory = require('function/factory');
var bind = require('function/bind');
var PROTOTYPE = 'prototype';
var CONSTRUCTOR = 'constructor';
var EXTEND = 'extend';
var isValue = require('is/value');
var noop = require('function/noop');
var DOUBLE_UNDERSCORE = '__';
var COLON = ':';
var isOf = require('is/of');
var toArray = require('to/array');
var reduce = require('array/reduce');
var namedChain = require('function/chain/rename');
var CONSTRUCTOR_KEY = DOUBLE_UNDERSCORE + CONSTRUCTOR + DOUBLE_UNDERSCORE;
var createFrom = require('object/create-from');
var bindTo = require('function/bind-to');
constructorExtend.wrapper = constructorWrapper;

function constructorWrapper(Constructor, life_, notOriginal) {
    var life = life_ || {};
    __.isInstance = Constructor.isInstance = function (instance) {
        return isInstance(instance, Constructor);
    };
    Constructor.lifecycle = life;
    __.factory = Constructor.factory = factory(Constructor);
    var fn = __.fn = Constructor.fn = Constructor[PROTOTYPE].fn = Constructor[PROTOTYPE];
    if (!fn.lifecycle) {
        fn.lifecycle = lifecycle;
    }
    __.constructor = Constructor.constructor = Constructor;
    __[EXTEND] = Constructor[EXTEND] = bind(constructorExtend, Constructor);
    __.origin = Constructor.origin = !notOriginal;
    return __;

    function __(one) {
        return isValue(one) && isOf(one, Constructor) ? one : new Constructor(toArray(arguments));
    }
}

function constructorExtend(name_, options) {
    var nameString, extendedLifecycle, constructorKeyName, child, passedParent, hasConstructor, constructor, methods, lifecycle, events, parent = this,
        name = name_,
        nameIsStr = isString(name);
    if (!nameIsStr) {
        options = name;
        name = null;
    }
    lifecycle = options.lifecycle || {};
    methods = options.methods || {};
    events = options.events || {};
    child = has(options, CONSTRUCTOR) ? options.constructor : construcktr;
    child = child ? namedChain(name || this.name, child, this) : this;
    Surrogate[PROTOTYPE] = parent ? parent[PROTOTYPE] : {};
    child[PROTOTYPE] = merge(createFrom(Surrogate), methods);
    // don't call the function if nothing exists
    constructor = child;
    extendedLifecycle = reduce(lifecycle, function (copy, value, key) {
        var previous = copy[key] || noop;
        copy[key] = function () {
            return value.apply(this, [bindTo(previous, this)].concat(toArray(arguments)));
        };
    }, merge({}, parent ? parent.lifecycle : {}));
    child = constructorWrapper(constructor, extendedLifecycle, 1);
    constructor[PROTOTYPE][CONSTRUCTOR_KEY] = child;
    return child;

    function Surrogate() {
        this[CONSTRUCTOR] = child;
    }
}

function construcktr(supr, args) {
    supr(args);
}

function lifecycle(key, args) {
    var parent = this.constructor;
    var life = parent.lifecycle;
    return life[key] && life[key].apply(this, args);
}